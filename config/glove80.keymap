/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define LAYER_DEFAULT   0
#define LAYER_LOWER     1
#define LAYER_RAISE     2
#define LAYER_TRI       3

/* #define for key positions */

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

// NOTE: I removed "C" (POS_LH_C3R4) and "D" (POS_LH_C3R5) from `KEYS_LEFT` so I can still do one-handed CTRL-C and CTRL-D

#define KEYS_LEFT POS_LH_C1R2 POS_LH_C1R3 POS_LH_C1R4 POS_LH_C1R5 POS_LH_C2R1 POS_LH_C2R2 POS_LH_C2R3 POS_LH_C2R4 POS_LH_C2R5 POS_LH_C2R6 POS_LH_C3R1 POS_LH_C3R2 POS_LH_C3R3 POS_LH_C3R6 POS_LH_C4R1 POS_LH_C4R2 POS_LH_C4R3 POS_LH_C4R4 POS_LH_C4R5 POS_LH_C4R6 POS_LH_C5R1 POS_LH_C5R2 POS_LH_C5R3 POS_LH_C5R4 POS_LH_C5R5 POS_LH_C5R6 POS_LH_C6R1 POS_LH_C6R2 POS_LH_C6R3 POS_LH_C6R4 POS_LH_C6R5 POS_LH_C6R6
#define KEYS_RIGHT POS_RH_C1R2 POS_RH_C1R3 POS_RH_C1R4 POS_RH_C1R5 POS_RH_C2R1 POS_RH_C2R2 POS_RH_C2R3 POS_RH_C2R4 POS_RH_C2R5 POS_RH_C2R6 POS_RH_C3R1 POS_RH_C3R2 POS_RH_C3R3 POS_RH_C3R4 POS_RH_C3R5 POS_RH_C3R6 POS_RH_C4R1 POS_RH_C4R2 POS_RH_C4R3 POS_RH_C4R4 POS_RH_C4R5 POS_RH_C4R6 POS_RH_C5R1 POS_RH_C5R2 POS_RH_C5R3 POS_RH_C5R4 POS_RH_C5R5 POS_RH_C5R6 POS_RH_C6R1 POS_RH_C6R2 POS_RH_C6R3 POS_RH_C6R4 POS_RH_C6R5 POS_RH_C6R6
#define THUMBS POS_RH_T1 POS_RH_T2 POS_RH_T3 POS_RH_T4 POS_RH_T5 POS_RH_T6 POS_LH_T1 POS_LH_T2 POS_LH_T3 POS_LH_T4 POS_LH_T5 POS_LH_T6



/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        hml: hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_HOLD_TAP_LEFT";
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
            hold-trigger-on-release;
        };

        hmr: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_HOLD_TAP_RIGHT";
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
            hold-trigger-on-release;
        };

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
        };    



    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LAYER_LOWER LAYER_RAISE>;
            then-layer = <LAYER_TRI>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    // Custom defiinitions
    #define _HOME_A_        &qt LCTRL A
    #define _HOME_S_        &hml LALT S
    #define _HOME_D_        &hml LGUI D
    #define _HOME_K_        &hmr LGUI K
    #define _HOME_L_        &hmr LALT L
    #define _HOME_SEMI_     &qt LCTRL SEMI

    #define _LSHFT_LPAR_    &hml LSHFT LPAR
    #define _RSHFT_RPAR_    &hmr RSHFT RPAR
    #define _LALT_LBRC_     &hml LALT LBRC
    #define _RALT_RBRC_     &hmr RALT RBRC
    #define _LGUI_LBKT_     &hmr LGUI LBKT
    #define _RGUI_RBKT_     &hmr RGUI RBKT


    #define _MAC_LOCK_      &kp RG(RC(Q))
    #define _SCRN_CAP_      &kp RG(RS(N4))
    #define _ZOOM_IN_       &kp RG(RS(EQUAL))
    #define _ZOOM_OUT_      &kp RG(MINUS)

    #define _LED_SP_INC_    &rgb_ug RGB_SPI
    #define _LED_SP_DEC_    &rgb_ug RGB_SPD
    #define _LED_SA_INC_    &rgb_ug RGB_SAI
    #define _LED_SA_DEC_    &rgb_ug RGB_SAD
    #define _LED_HU_INC_    &rgb_ug RGB_HUI
    #define _LED_HU_DEC_    &rgb_ug RGB_HUD
    #define _LED_BR_INC_    &rgb_ug RGB_BRI
    #define _LED_BR_DEC_    &rgb_ug RGB_BRD
    #define _LED_TOGGLE_    &rgb_ug RGB_TOG
    #define _LED_CYCLE_     &rgb_ug RGB_EFF

    #define _STATUS_        &rgb_ug_status_macro

    keymap {
        compatible = "zmk,keymap";

        layer_base {
            bindings = <
//╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮                                                                                              ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
    &kp F1         &kp F2         &kp F3         &kp F4         &kp F5                                                                                                                                      &kp F6         &kp F7         &kp F8         &kp F9         &kp F10
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤                                                                                              ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &kp EQUAL      &kp N1         &kp N2         &kp N3         &kp N4         &kp N5                                                                                                        &kp N6         &kp N7         &kp N8         &kp N9         &kp N0         &kp MINUS
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤                                                                                              ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &kp GRAVE      &kp Q          &kp W          &kp E          &kp R          &kp T                                                                                                         &kp Y          &kp U          &kp I          &kp O          &kp P          &kp PIPE
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤                                                                                              ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &kp ESC        _HOME_A_       _HOME_S_       _HOME_D_       &kp F          &kp G                                                                                                         &kp H          &kp J          _HOME_K_       _HOME_L_       _HOME_SEMI_    &kp SQT
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ╭──────────────┬──────────────┬──────────────┬┬──────────────┬──────────────┬──────────────╮ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &kp MINUS      &kp Z          &kp X          &kp C          &kp V          &kp B            &kp LBRC       &kp LBKT       &kp LT          &kp GT         &kp RBKT       &kp RBRC         &kp N          &kp M          &kp COMMA      &kp DOT        &kp FSLH       &kp UNDER
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    _STATUS_       &none          &none          &none          &none                           &lt 1 SPACE    _LSHFT_LPAR_   &kp TAB         &kp BSPC       _RSHFT_RPAR_   &lt 2 ENTER                     &none          &none          &none          &none          _STATUS_
//╰──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────┴┴──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────╯
            >;
        };

        layer_lower {
            bindings = <
//╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮                                                                                              ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
   &kp C_BRI_DN    &kp C_BRI_UP   &kp C_PREV     &kp C_NEXT     &kp C_PP                                                                                                                                    &kp C_MUTE     &kp C_VOL_DN   &kp C_VOL_UP   &none          &kp PAUSE_BREAK
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤                                                                                              ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &trans         &none          &none          &none          &none          &kp HOME                                                                                                      &kp LPAR       &kp KP_NUM     &kp KP_EQUAL   &kp KP_SLASH   &kp STAR       &kp PRINTSCREEN
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤                                                                                              ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &kp GRAVE      &kp N1         &kp N2         &kp N3         &kp N4         &kp N5                                                                                                        &kp N6         &kp N7         &kp N8         &kp N9         &kp N0         &kp DEL
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤                                                                                              ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &kp TILDE      &kp EXCL       &kp AT         &kp HASH       &kp DLLR       &kp PRCNT                                                                                                     &kp CARET      &kp AMPS       &kp STAR       &kp MINUS      &kp PLUS       &kp PIPE
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ╭──────────────┬──────────────┬──────────────┬┬──────────────┬──────────────┬──────────────╮ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &kp MINUS      &kp ESC        &kp PLUS       &kp MINUS      &kp EQUAL      &kp UNDER        &trans         &trans         &trans          &trans         &trans         &trans           &kp LBKT       &kp RBKT       &kp EQUAL      &kp DOT        &kp BSLH       &kp UNDER
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &trans         &trans         &trans         &trans         &trans                          &trans         &trans         &trans          &trans         &trans         &trans                          &trans         &trans         &trans         &trans         &trans
//╰──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────┴┴──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────╯
            >;
        };

        layer_raise {
            bindings = <
//╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮                                                                                              ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
    &none          &none          &none          &none          &none                                                                                                                                       &none          &none          &none          &none          &none
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤                                                                                              ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &none          &none          &none          &none          &none          &none                                                                                                         &none          &none          &none          &none          &none          &none
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤                                                                                              ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &none          &none          &none          &none          &none          &none                                                                                                         &none          &none          &none          &none          &none          &none
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤                                                                                              ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &none          &kp LCTRL      &kp LALT       &kp LGUI       &none          &none                                                                                                         &kp LEFT       &kp DOWN       &kp UP         &kp RIGHT      &none          &none
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ╭──────────────┬──────────────┬──────────────┬┬──────────────┬──────────────┬──────────────╮ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &none          &none          &none          &none          &none          &trans           &trans         &trans          &trans         &trans         &trans          &trans          &kp HOME       &kp PG_DN      &kp PG_UP      &kp END        &none          &none  
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &trans         &trans         &trans         &trans         &trans                          &trans         &trans         &trans          &trans         &trans         &trans                          &trans         &trans         &trans         &trans         &trans
//╰──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────┴┴──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────╯
            >;
        };
        layer_tri {
            bindings = <
//╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮                                                                                              ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
    &sys_reset     &bootloader    &none          &none          &none                                                                                                                                       &none          &none          &none          &bootloader    &sys_reset
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤                                                                                              ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &none          _LED_SP_INC_   _LED_SA_INC_   _LED_HU_INC_   _LED_BR_INC_   _LED_TOGGLE_                                                                                                  &none          &none          &none          &out OUT_USB   &out OUT_BLE   &bt BT_CLR_ALL
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤                                                                                              ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &none          _LED_SP_DEC_   _LED_SA_DEC_   _LED_HU_DEC_   _LED_BR_DEC_   _LED_CYCLE_                                                                                                   &none          &none          &none          &none          &none          &none 
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤                                                                                              ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &trans         &kp C_PREV     &kp C_NEXT     &kp C_VOL_DN   &kp C_VOL_UP   &kp C_PP                                                                                                      &kp LEFT       &kp DOWN       &kp UP         &kp RIGHT      _ZOOM_IN_      _SCRN_CAP_
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ╭──────────────┬──────────────┬──────────────┬┬──────────────┬──────────────┬──────────────╮ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &bt BT_CLR     &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &trans         &trans         &trans          &trans         &trans         &trans           &trans         &trans         &trans         &trans         _ZOOM_OUT_     _MAC_LOCK_
//├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼┼──────────────┼──────────────┼──────────────┤ ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
    &trans         &trans         &trans         &trans         &trans                          &trans         &trans         &trans          &trans         &trans         &trans                          &trans         &trans         &none          &none          &none
//╰──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────┴┴──────────────┴──────────────┴──────────────╯ ╰──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────╯
            >;
        };
    };
};
